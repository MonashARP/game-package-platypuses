[{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"introduction-of-blackjack-package","dir":"Articles","previous_headings":"","what":"Introduction of Blackjack package","title":"Blackjack Game","text":"Blackjack package allows users simulate score round classic Blackjack card game. Users can deal cards, calculate hand values, simulate full game rounds, explore decision-making logic whether dealer hit soft 17. package also supports extensibility via custom vector classes C++-based scoring logic efficiency.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"what-is-blackjack","dir":"Articles","previous_headings":"","what":"What is Blackjack?","title":"Blackjack Game","text":"Blackjack casino card game played dealer one players. goal get hand value close 21 possible, without going . Number cards worth face value, face cards (J, Q, K) worth 10, Aces can worth 1 11 depending hand. player can choose “hit” (take another card) “stand” (keep current hand). dealer follows fixed strategy must hit reaching least 17.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Blackjack Game","text":"","code":"# Load the package library(Blackjack)  # Create a shuffled card deck deck <- deck_cards()  # Deal a hand of 2 cards deal_hand(deck$cards, 2) #> <card[2]> #> [1] 9♦  10♥  # Score a hand blackjack_score(card(c(\"A\", \"9\"), c(\"♠\", \"♦\"))) #> [1] 20"},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"simulating-a-round","dir":"Articles","previous_headings":"Basic Usage","what":"Simulating a round","title":"Blackjack Game","text":"simulate_blackjack_game() function plays full round one players using realistic Blackjack rules. includes scoring logic, dealer AI, option set seed reproducibility.","code":"game <- simulate_blackjack_game(num_players = 2, seed = 375) print(game) #> Dealer's hand:  4♦ 5♦ K♦  #> Dealer's score:  19  #>  #> Player 1 hand: 2♠ 3♥ 6♣ 9♦ #> Player 1 score: 20 #> Player 1 result: Player wins! #>  #> Player 2 hand: 3♦ 8♦ 3♠ 5♣ #> Player 2 score: 19 #> Player 2 result: Tie!"},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"accessing-player-and-dealer-results","dir":"Articles","previous_headings":"Basic Usage","what":"Accessing Player and Dealer Results","title":"Blackjack Game","text":"can inspect results players dealer separately. check results Player 1, use: can change number players[[x]] inspect players (e.g., players[[2]] Player 2). check Dealer’s hand score, use:","code":"game$players[[1]] #> $hand #> <card[4]> #> [1] 2♠ 3♥ 6♣ 9♦ #>  #> $score #> [1] 20 #>  #> $result #> [1] \"Player wins!\" game$dealer #> $hand #> <card[3]> #> [1] 4♦ 5♦ K♦ #>  #> $score #> [1] 19"},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"check-for-soft-17","dir":"Articles","previous_headings":"Basic Usage","what":"Check for Soft 17","title":"Blackjack Game","text":"helper function is_soft_17() checks whether hand considered “soft 17” — , hand totaling 17 includes Ace counted 11. rule affects whether dealer hit stand gameplay. function used internally simulate_blackjack_game(), can also test hands manually:","code":"is_soft_17(card(c(\"A\", \"6\"), c(\"♠\", \"♣\")))  # TRUE #> [1] TRUE is_soft_17(card(c(\"10\", \"7\"), c(\"♠\", \"♦\"))) # FALSE #> [1] FALSE"},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"custom-card-vector-class","dir":"Articles","previous_headings":"","what":"Custom Card Vector Class","title":"Blackjack Game","text":"package includes custom vector class cards, implemented using vctrs package. card() constructor allows create vector cards validated ranks suits. can extract compute useful properties using helper functions:","code":"cards <- card(c(\"A\", \"10\", \"7\"), c(\"♥\", \"♦\", \"♠\")) card_suit(cards) #> [1] \"♥\" \"♦\" \"♠\" card_value(cards) #> [1] 11 10  7 is_face_card(cards)  #> [1] FALSE FALSE FALSE"},{"path":"https://monasharp.github.io/game-package-platypuses/articles/Blackjack.html","id":"team-contributions","dir":"Articles","previous_headings":"","what":"Team Contributions","title":"Blackjack Game","text":"package collaboratively developed Min Ni Hong, Vaishnavi Amuda, Shivesh Krishna. Min Ni Hong implemented foundational components package’s card system. included designing custom card constructor, implementing essential vctrs methods (vec_ptype2(), vec_cast(), format()), writing unit tests ensure new structures behaved consistently. also contributed first section design vignette, explaining motivation behind creating dedicated card class. Vaishnavi Amuda focused extending functionality new card class custom generics. implemented functions card_suit(), card_value(), related .card methods, also adapted existing helpers like build_full_deck() make use new constructor. Comprehensive tests written generic, authored second section design vignette covering generics used enhance extensibility. Shivesh Krishna led performance-focused enhancements integrating C++ via Rcpp hand scoring. wrote score_hand_cpp, ensured compatibility card class across gameplay functions, refactored core gameplay logic make full use new system. Unit tests created C++ scoring refactored game pipeline. also completed third section design vignette, documenting rationale using C++, handled final package checks vignette knitting. team worked closely throughout development process, reviewing ’s code, sharing design decisions, troubleshooting together ensure final package cohesive, well-integrated, thoroughly tested. details internal design, including C++ vctrs integration, future improvements, see Design decisions behind Blackjack package.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Design Decisions","text":"vignette describes designed Blackjack R package. explains choices function names, arguments, users interact package. also cover internal helper functions support clean testable code, didn’t use non-standard evaluation. Limitations designs considered discussed. also explain ChatGPT helped us writing code, fixing errors, writing documentation.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"function-name-design","dir":"Articles","previous_headings":"","what":"Function name Design","title":"Design Decisions","text":"used simple clear names functions users can easily guess — especially beginners. card() main constructor creates custom card vector. checks ranks suits valid uses consistent format. blackjack_score() calculates total score hand using Blackjack rules. simulate_blackjack_game() simulates full multiplayer Blackjack game. is_soft_17() checks hand soft 17, means hand totals 17 Ace counted 11. rule important dealer must hit soft 17. deck_cards() creates shuffled deck (multiple decks). deal_hand() lets users draw certain number cards deck. also included helper functions work card objects: card_suit() extracts suit (♠, ♥, ♦, ♣). card_rank() extracts rank (, 2–10, J, Q, K). is_face_card() checks card face card (J, Q, K). helper functions assist users identifying extracting useful information card vectors. also use S3 method dispatch (UseMethod), making flexible robust. provided default methods deliver informative error messages input valid card object.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"argument-design","dir":"Articles","previous_headings":"","what":"Argument Design","title":"Design Decisions","text":"included arguments like rank, suit, num_players, seed give users flexibility control game runs. card(), rank suit arguments essential. requiring users supply , can create hand want. included validation ensure: ranks suits valid set. two vectors equal length. helps avoid silent bugs provides clear feedback. added default values possible make functions beginner-friendly: num_players = 1 allows quick simulation single-player game. no_of_decks = 1 default deck_cards(), matching standard Blackjack setup. defaults help users try package immediately without needing understand details first.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"user-workflow","dir":"Articles","previous_headings":"","what":"User Workflow","title":"Design Decisions","text":"’s typical user use package step step: Create deck: Use deck_cards() generate one shuffled decks cards game. Deal cards: Use deal_hand() draw cards deck players dealer. Create hands: needed, users can manually create hands using card() constructor specify custom cards. Score hands: Use blackjack_score() calculate total Blackjack score hand, proper Ace handling. Check rules like soft 17: Use is_soft_17() determine hand meets soft 17 condition. Simulate full game: run complete round Blackjack multiple players dealer, use simulate_blackjack_game(). Explore card details: Use helper functions like card_rank(), card_suit(), is_face_card() extract check details individual cards. makes package flexible simple uses advanced customization — advanced users can build gameplay loop, casual users can simulate full game single function call.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"use-of-internal-modular-functions","dir":"Articles","previous_headings":"","what":"Use of internal modular functions","title":"Design Decisions","text":"included internal helper functions keep code clean organised: new_card() used inside main card() function build card object. ’s exported skips input checks, used safely inside package. draw_cards() defined inside simulate_blackjack_game() handle drawing cards deck. kept internal ’s useful simulation. breaking code smaller pieces like , ’s easier test, fix, update one part without affecting everything else. modular design also helps us reuse logic different places keeps main functions simple easy understand.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"use-of-non-standard-evaluation-nse","dir":"Articles","previous_headings":"","what":"Use of Non-Standard Evaluation (NSE)","title":"Design Decisions","text":"NSE used package. chose standard evaluation simplicity, transparency, better compatibility testing debugging workflows.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Design Decisions","text":"core game functionality works intended, current version package several limitations: support Blackjack betting mechanics (e.g., betting chips, insurance, doubling , splitting). Player AI rule-based probabilistic adaptive. Multiplayer simulated independent players, interactions table-based dynamics supported. basic strategy followed (e.g., hit 17, stand otherwise). support saving game state custom deck configurations. main functions tested, edge cases covered yet (e.g., cards one suit, consecutive face cards). GUI Shiny-based frontend. Unit tests included user-facing functions, edge cases (e.g. face cards) fully covered. limitations consciously accepted order prioritize core game mechanics code clarity.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"alternative-designs-considered","dir":"Articles","previous_headings":"","what":"Alternative Designs Considered","title":"Design Decisions","text":"discussed considered several alternative approaches: Object system: considered using S4 R6 classes model cards decks. Ultimately, chose S3 vctrs::new_rcrd simplicity better compatibility tidyverse. Card representation: Rather use base R structures (e.g., lists character vectors), created custom card class using vctrs. allowed better type control intuitive printing formatting. Game strategy: full decision table optimal Blackjack strategy considered excluded due time complexity. added later. Deck generation: briefly discussed external configuration files (e.g. JSON-based deck layouts) chose include keep package lightweight. Exposing internal helpers: debated exporting low-level functions like new_card() score_hand_cpp(), kept internal encapsulation.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"use-of-ai-llm-support","dir":"Articles","previous_headings":"","what":"Use of AI (LLM) Support","title":"Design Decisions","text":"used ChatGPT assist writing documentation, creating unit test examples, debugging function errors, drafting function implementations. Specifically, provided prompts like: “card <- function(rank = character(), suit = character()) {…}” “’m writing custom vctrs class card object Blackjack R package. want store rank suit card. ’m sure whether use vctrs::new_vctr() vctrs::new_rcrd() constructor. one better need store two fields (rank suit) later extract separately helper functions like card_rank() card_suit()?” “better define methods using vector .R file seperate ?” “’m getting  devtools::check() warning: ‘Undocumented code objects: vec_ptype2.card.card’. don’t want export internal method. way suppress document minimally pass CRAN-style checks?” “’m using custom S3 class vctrs Blackjack R package. run devtools::check(), get warning undocumented code objects like vec_ptype2.card.character. already marked functions  @noRd. warning still showing, can fix properly without exporting ?” “created custom card class using vctrs::new_rcrd(). also wrote helper functions like card_suit() card_rank(). Can show write basic unit tests using testthat check functions return correct output throw informative errors non-card inputs?” “’m using Rcpp R package. place C++ file, make sure function registered properly Rcpp?” “’m getting error Blackjack_score_hand_cpp available .Call(). C++ file src/ used // [[Rcpp::export]]. fix ?” -“’s best way write R wrapper around C++ function can call R functions?” responses helped us understand best practices structuring game package, especially using vctrs Rcpp. directly used suggestions write clearer documentation, fix warnings package checks, improve test coverage. particular, ChatGPT guided us resolving technical issues (e.g., .Call() errors), designing internal methods, writing unit tests follow tidyverse CRAN standards. support improved package quality development workflow.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/articles/design-choices.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Design Decisions","text":"aimed strike balance extensibility simplicity. core design decisions : Use S3 + vctrs model cards type safety Leverage C++ scoring logic performance matters Keep AI minimal simulation linear Write unit tests validate gameplay logic Document AI usage limitations transparently package provides clean foundation anyone looking extend Blackjack engine R, whether add features, connect Shiny, explore decision theory gameplay.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Min Ni Hong. Author, maintainer. Vaishnavi Amuda. Author. Shivesh Palanisamy. Author.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hong M, Amuda V, Palanisamy S (2025). Blackjack: Simulate Score Blackjack Game Rounds. R package version 0.0.1, https://monasharp.github.io/game-package-platypuses.","code":"@Manual{,   title = {Blackjack: Simulate and Score Blackjack Game Rounds},   author = {Min Ni Hong and Vaishnavi Amuda and Shivesh Palanisamy},   year = {2025},   note = {R package version 0.0.1},   url = {https://monasharp.github.io/game-package-platypuses}, }"},{"path":"https://monasharp.github.io/game-package-platypuses/index.html","id":"blackjack","dir":"","previous_headings":"","what":"Simulate and Score Blackjack Game Rounds","title":"Simulate and Score Blackjack Game Rounds","text":"Blackjack R package simulates multiplayer game Blackjack players dealer. implements realistic Blackjack rules dealer behavior soft 17 bust detection, players making hit/stand decisions using simplified strategy.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate and Score Blackjack Game Rounds","text":"can install development version package using devtools:","code":"# Install devtools if not already installed install.packages(\"devtools\")  # Install Blackjack from GitHub devtools::install_github(\"MonashARP/game-package-platypuses\")"},{"path":"https://monasharp.github.io/game-package-platypuses/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Simulate and Score Blackjack Game Rounds","text":"Simulate 1 players Blackjack game Dealer hits soft 17 (e.g., Ace + 6) Players make decisions using basic strategy Handles busts, ties, win/loss logic Fully documented unit-tested","code":""},{"path":[]},{"path":"https://monasharp.github.io/game-package-platypuses/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simulate and Score Blackjack Game Rounds","text":"","code":"library(Blackjack)  # Set seed for reproducibility set.seed(123)  # Simulate a 2-player game game <- simulate_blackjack_game(num_players = 2)  # Dealer results game$dealer #> $hand #> <card[3]> #> [1] 6♦ 3♥ A♥ #>  #> $score #> [1] 20  # Player 1 results game$players[[1]] #> $hand #> <card[4]> #> [1] 2♥ 4♠ Q♦ Q♣ #>  #> $score #> [1] 26 #>  #> $result #> [1] \"Player busts! Dealer wins.\""},{"path":"https://monasharp.github.io/game-package-platypuses/index.html","id":"getting-helpb","dir":"","previous_headings":"","what":"Getting helpb","title":"Simulate and Score Blackjack Game Rounds","text":"details examples, see vignette visit package website Blackjack Get Started page !","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/blackjack_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Score of a Blackjack Hand — blackjack_score","title":"Calculate the Score of a Blackjack Hand — blackjack_score","text":"function computes total value Blackjack hand using C++ backend efficient scoring. Aces treated 11 unless causes hand bust, case treated 1.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/blackjack_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Score of a Blackjack Hand — blackjack_score","text":"","code":"blackjack_score(hand)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/blackjack_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Score of a Blackjack Hand — blackjack_score","text":"hand card vector representing hand scored (e.g., card(c(\"\",\"10\"), c(\"♠\",\"♦\"))).","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/blackjack_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Score of a Blackjack Hand — blackjack_score","text":"numeric value 2 31 representing total score hand.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/blackjack_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Score of a Blackjack Hand — blackjack_score","text":"function calls underlying C++ function (score_hand_cpp) performance. automatically adjusts Ace values supports hands length.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/blackjack_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Score of a Blackjack Hand — blackjack_score","text":"","code":"blackjack_score(card(c(\"A\", \"10\"), c(\"♠\", \"♦\")))       # returns 21 #> [1] 21 blackjack_score(card(c(\"A\", \"9\", \"2\"), c(\"♠\", \"♣\", \"♦\"))) # returns 12 #> [1] 12"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/c.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Multiple Card Vectors — c.card","title":"Combine Multiple Card Vectors — c.card","text":"Method c() combines one card vectors single vector.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/c.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Multiple Card Vectors — c.card","text":"","code":"# S3 method for class 'card' c(...)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/c.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Multiple Card Vectors — c.card","text":"... One objects class \"card\".","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/c.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Multiple Card Vectors — c.card","text":"combined card vector.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/c.card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Multiple Card Vectors — c.card","text":"","code":"hand1 <- card(c(\"A\", \"10\"), c(\"♠\", \"♦\")) hand2 <- card(c(\"Q\"), c(\"♥\")) c(hand1, hand2) #> <card[3]> #> [1] A♠  10♦ Q♥"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Card Vector — card","title":"Create a Card Vector — card","text":"Constructs custom S3 rcrd object class \"card\", validated rank suit fields. Used foundation representing cards Blackjack game package.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Card Vector — card","text":"","code":"card(rank = character(), suit = character())"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Card Vector — card","text":"rank character vector ranks (e.g., \"\", \"2\", ..., \"K\"). suit character vector suits (e.g., \"♠\", \"♥\", \"♦\", \"♣\").","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Card Vector — card","text":"object class \"card\" representing provided cards.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Card Vector — card","text":"constructor performs input validation ensure ranks suits valid equal length. Use function create cards manually writing helper functions build decks hands.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Card Vector — card","text":"","code":"card(c(\"A\", \"10\", \"Q\"), c(\"♠\", \"♥\", \"♦\")) #> <card[3]> #> [1] A♠  10♥ Q♦"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Rank from a Card Vector — card_rank","title":"Extract Rank from a Card Vector — card_rank","text":"Returns rank (face value) card card vector.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Rank from a Card Vector — card_rank","text":"","code":"card_rank(x)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Rank from a Card Vector — card_rank","text":"x card vector created using card().","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Rank from a Card Vector — card_rank","text":"character vector ranks (\"2\"–\"10\", \"J\", \"Q\", \"K\", \"\").","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Rank from a Card Vector — card_rank","text":"function returns character values rank field card. Input must class card; otherwise, error raised.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Rank from a Card Vector — card_rank","text":"","code":"cards <- card(c(\"A\", \"10\", \"Q\"), c(\"♠\", \"♥\", \"♦\")) card_rank(cards)  # \"A\" \"10\" \"Q\" #> [1] \"A\"  \"10\" \"Q\""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_suit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Suit from a Card Vector — card_suit","title":"Extract Suit from a Card Vector — card_suit","text":"Returns suit symbols (♠, ♥, ♦, ♣) card card vector.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_suit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Suit from a Card Vector — card_suit","text":"","code":"card_suit(x)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_suit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Suit from a Card Vector — card_suit","text":"x card vector created using card().","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_suit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Suit from a Card Vector — card_suit","text":"character vector suit symbols, one card.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_suit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Suit from a Card Vector — card_suit","text":"function uses method dispatch extract suit field custom card class. input card object, informative error thrown.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_suit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Suit from a Card Vector — card_suit","text":"","code":"cards <- card(c(\"A\", \"10\", \"Q\"), c(\"♠\", \"♥\", \"♦\")) card_suit(cards)  # \"♠\" \"♥\" \"♦\" #> [1] \"♠\" \"♥\" \"♦\""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Numeric Value from a Card Vector — card_value","title":"Extract Numeric Value from a Card Vector — card_value","text":"Returns Blackjack numeric value card.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Numeric Value from a Card Vector — card_value","text":"","code":"card_value(x)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Numeric Value from a Card Vector — card_value","text":"x card vector created using card().","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Numeric Value from a Card Vector — card_value","text":"numeric vector: 2–10 number cards, 10 face cards, 11 Aces.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/card_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Numeric Value from a Card Vector — card_value","text":"","code":"cards <- card(c(\"A\", \"K\", \"5\"), c(\"♠\", \"♥\", \"♦\")) card_value(cards)  # 11 10 5 #> [1] 11 10  5"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deal_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a Hand of Blackjack Cards — deal_hand","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"Randomly selects specified number cards given deck. function typically used deal initial hand player dealer round Blackjack.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deal_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"","code":"deal_hand(deck, n = 2)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deal_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"deck card vector representing deck deal , typically deck_cards()$cards. n Integer. Number cards deal (default 2).","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deal_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"card vector containing dealt hand.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deal_hand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"function samples cards shuffled card vector. remove dealt cards original deck — needed, can manage deck state manually using indexing.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deal_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"","code":"deck <- deck_cards() hand <- deal_hand(deck$cards, 2) print(hand) #> <card[2]> #> [1] 9♦  10♥"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Shuffled Blackjack Deck — deck_cards","title":"Create a Shuffled Blackjack Deck — deck_cards","text":"Generates shuffled deck cards use Blackjack games. Supports combining multiple standard 52-card decks one.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Shuffled Blackjack Deck — deck_cards","text":"","code":"deck_cards(no_of_decks = 1)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Shuffled Blackjack Deck — deck_cards","text":"no_of_decks Integer. Number standard decks include (default 1).","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_cards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Shuffled Blackjack Deck — deck_cards","text":"object class \"blackjack_deck\", list two elements: cards shuffled card vector. decks number decks used create full shoe.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_cards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Shuffled Blackjack Deck — deck_cards","text":"card represented using custom card vector class. returned object includes shuffled vector cards metadata number decks used. function typically used starting point dealing hands game.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Shuffled Blackjack Deck — deck_cards","text":"","code":"deck <- deck_cards() print(deck) #> $cards #> <card[52]> #>  [1] 3♦  10♣ Q♠  A♥  10♦ 3♠  J♥  4♣  4♠  K♦  5♠  2♠  A♦  7♠  10♥ 7♥  9♣  3♣  A♣  #> [20] 8♦  8♠  K♠  5♣  10♠ J♠  J♦  2♣  7♦  6♦  5♦  2♥  6♠  K♥  Q♦  Q♥  5♥  9♥  K♣  #> [39] A♠  J♣  3♥  6♥  2♦  4♥  8♥  6♣  Q♣  7♣  9♠  4♦  9♦  8♣  #>  #> $decks #> [1] 1 #>  #> attr(,\"class\") #> [1] \"blackjack_deck\" print(deck$cards) #> <card[52]> #>  [1] 3♦  10♣ Q♠  A♥  10♦ 3♠  J♥  4♣  4♠  K♦  5♠  2♠  A♦  7♠  10♥ 7♥  9♣  3♣  A♣  #> [20] 8♦  8♠  K♠  5♣  10♠ J♠  J♦  2♣  7♦  6♦  5♦  2♥  6♠  K♥  Q♦  Q♥  5♥  9♥  K♣  #> [39] A♠  J♣  3♥  6♥  2♦  4♥  8♥  6♣  Q♣  7♣  9♠  4♦  9♦  8♣  head(deck$cards) #> <card[6]> #> [1] 3♦  10♣ Q♠  A♥  10♦ 3♠"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_of_cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a Hand of Blackjack Cards — deal_hand","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"Randomly selects specified number cards given deck. function typically used deal initial hand player dealer round Blackjack.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_of_cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"","code":"deal_hand(deck, n = 2)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_of_cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"deck character vector cards (default: deck_cards()) n Number cards deal (default 2)","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_of_cards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"character vector containing dealt cards","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/deck_of_cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a Hand of Blackjack Cards — deal_hand","text":"","code":"deal_hand(deck_cards()$cards, 2) #> <card[2]> #> [1] 3♠ J♥"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_face_card.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Face Cards — is_face_card","title":"Identify Face Cards — is_face_card","text":"Determines whether card card vector face card (J, Q, K).","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_face_card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Face Cards — is_face_card","text":"","code":"is_face_card(x)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_face_card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Face Cards — is_face_card","text":"x card vector created using card().","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_face_card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Face Cards — is_face_card","text":"logical vector: TRUE face cards, FALSE otherwise.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_face_card.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Face Cards — is_face_card","text":"Returns logical vector indicating whether card face card. Non-card inputs throw error.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_face_card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Face Cards — is_face_card","text":"","code":"cards <- card(c(\"J\", \"5\", \"Q\"), c(\"♣\", \"♦\", \"♥\")) is_face_card(cards)  # TRUE FALSE TRUE #> [1]  TRUE FALSE  TRUE"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_soft_17.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Hand is a Soft 17 — is_soft_17","title":"Check if a Hand is a Soft 17 — is_soft_17","text":"Determines whether Blackjack hand qualifies \"soft 17\". soft 17 total 17 Ace counted 11. distinction affects dealer's behavior — dealers typically hit soft 17.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_soft_17.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Hand is a Soft 17 — is_soft_17","text":"","code":"is_soft_17(hand)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_soft_17.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Hand is a Soft 17 — is_soft_17","text":"hand card vector representing Blackjack hand (e.g. card(c(\"\", \"6\"), c(\"♠\", \"♣\"))).","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_soft_17.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Hand is a Soft 17 — is_soft_17","text":"logical value: TRUE hand soft 17, FALSE otherwise.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_soft_17.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a Hand is a Soft 17 — is_soft_17","text":"function uses blackjack_score() calculate hand’s value assuming optimal Ace handling, checks lowering Ace(s) 1 reduce total 17. , hand soft 17.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/is_soft_17.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a Hand is a Soft 17 — is_soft_17","text":"","code":"is_soft_17(card(c(\"A\", \"6\"), c(\"♠\", \"♣\")))   # TRUE #> [1] TRUE is_soft_17(card(c(\"10\", \"7\"), c(\"♠\", \"♦\")))  # FALSE #> [1] FALSE"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/print.blackjack_game.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Blackjack Game Summary — print.blackjack_game","title":"Print a Blackjack Game Summary — print.blackjack_game","text":"Displays dealer’s hand score, followed player's hand, score, result. function called automatically printing objects class blackjack_game.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/print.blackjack_game.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Blackjack Game Summary — print.blackjack_game","text":"","code":"# S3 method for class 'blackjack_game' print(x, ...)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/print.blackjack_game.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Blackjack Game Summary — print.blackjack_game","text":"x object class blackjack_game returned simulate_blackjack_game. ... Additional arguments passed internal print methods (used).","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/print.blackjack_game.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Blackjack Game Summary — print.blackjack_game","text":"Invisibly returns original blackjack_game object.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/print.blackjack_game.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a Blackjack Game Summary — print.blackjack_game","text":"method provides clean summary simulated game round. especially helpful quick inspection calling game object console.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/print.blackjack_game.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Blackjack Game Summary — print.blackjack_game","text":"","code":"game <- simulate_blackjack_game(num_players = 2, seed = 42) print(game) #> Dealer's hand:  J♣ Q♦  #> Dealer's score:  20  #>  #> Player 1 hand: 2♠ K♥ 6♥ #> Player 1 score: 18 #> Player 1 result: Dealer wins! #>  #> Player 2 hand: J♠ J♦ #> Player 2 score: 20 #> Player 2 result: Tie! #>"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/simulate_blackjack_game.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","title":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","text":"function simulates complete round Blackjack one players dealer. player dealt two cards follows simple decision strategy (e.g., hit low scores). dealer plays according standard rules, including hitting soft 17.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/simulate_blackjack_game.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","text":"","code":"simulate_blackjack_game(num_players = 1, seed = NULL)"},{"path":"https://monasharp.github.io/game-package-platypuses/reference/simulate_blackjack_game.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","text":"num_players Integer. Number players game (default 1). seed Optional integer. provided, sets random seed reproducibility.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/simulate_blackjack_game.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","text":"structured list class \"blackjack_game\" containing: players list player results. contains player's hand, final score, outcome message. dealer list dealer's final hand score.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/simulate_blackjack_game.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","text":"player acts independently uses basic AI decision rule: hit 12, stand 17+, probabilistic decisions 12–16. dealer continues hitting reaching 17 , hits soft 17.","code":""},{"path":"https://monasharp.github.io/game-package-platypuses/reference/simulate_blackjack_game.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Multiplayer Blackjack Game — simulate_blackjack_game","text":"","code":"simulate_blackjack_game(num_players = 2, seed = 123) #> Dealer's hand:  6♦ 3♥ A♥  #> Dealer's score:  20  #>  #> Player 1 hand: 2♥ 4♠ Q♦ Q♣ #> Player 1 score: 26 #> Player 1 result: Player busts! Dealer wins. #>  #> Player 2 hand: 4♣ 5♣ K♥ #> Player 2 score: 19 #> Player 2 result: Dealer wins! #>"}]
